service: notes-app-api

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: eu-central-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"

functions:          
  artists-create:
    handler: api/artists/create.main
    events:
      - http:
          path: artists
          method: post
          cors: true
          authorizer: aws_iam
  artists-createRandom:
    handler: api/artists/create.random
    events:
      - http:
          path: artists/random
          method: post
          cors: true
          authorizer: aws_iam
  artists-createIndexes:
    handler: api/artists/create.indexes
    events:
      - http:
          path: artists/indexes
          method: post
          cors: true
          authorizer: aws_iam
  artists-getAll:
    handler: api/artists/get.all
    events:
      - http:
          path: artists
          method: get
          cors: true
          authorizer: aws_iam
  artists-getNames:
    handler: api/artists/get.indexes
    events:
      - http:
          path: artists-names
          method: get
          cors: true
          authorizer: aws_iam
  artists-get:
    handler: api/artists/get.main
    events:
      - http:
          path: artists/{name}
          method: get
          cors: true
          authorizer: aws_iam
  artists-update:
    handler: api/artists/update.main
    events:
      - http:
          path: artists/{name}
          method: put
          cors: true
          authorizer: aws_iam
  artists-delete:
    handler: api/artists/delete.main
    events:
      - http:
          path: artists/{name}
          method: delete
          cors: true
          authorizer: aws_iam

  lines-create:
    handler: api/lines/create.main
    events:
      - http:
          path: lines
          method: post
          cors: true
          authorizer: aws_iam
  lines-createIndexes:
    handler: api/lines/create.indexes
    events:
      - http:
          path: lines/indexes
          method: post
          cors: true
          authorizer: aws_iam
  lines-getAll:
    handler: api/lines/get.all
    events:
      - http:
          method: get
          path: lines
          cors: true
          authorizer: aws_iam
  lines-getIds:
    handler: api/lines/get.indexes
    events:
      - http:
          path: lines/indexes
          method: get
          cors: true
          authorizer: aws_iam
  lines-get:
    handler: api/lines/get.main
    events:
      - http:
          path: lines/{id}
          method: get
          cors: true
          authorizer: aws_iam
  lines-update:
    handler: api/lines/update.main
    events:
      - http:
          path: lines/{id}
          method: put
          cors: true
          authorizer: aws_iam
  lines-delete:
    handler: api/lines/delete.main
    events:
      - http:
          path: lines/{id}
          method: delete
          cors: true
          authorizer: aws_iam